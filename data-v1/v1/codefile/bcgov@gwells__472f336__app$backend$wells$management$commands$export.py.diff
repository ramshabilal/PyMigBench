diff --git a/app/backend/wells/management/commands/export.py b/app/backend/wells/management/commands/export.py
        index e2e9915cec9556564e51e0e6d79eb6bec8f64c30..472f336f5db32ead27b6f4e171c6b8f782da8a02 100644
        --- a/app/backend/wells/management/commands/export.py
        +++ b/app/backend/wells/management/commands/export.py
@@ -2,16 +2,16 @@ import csv
 import zipfile
 import os
 import logging
+import string
 
 from django.core.management.base import BaseCommand
 from django.db import models
 from django.db import connection
 
 from minio import Minio
-import xlsxwriter
+from openpyxl import Workbook
 
 from gwells.settings.base import get_env_variable
-from wells.models import Well, LithologyDescription, Casing, Screen, ProductionData, Perforation
 
 # Run from command line :
 # python manage.py export
@@ -50,7 +50,7 @@ class Command(BaseCommand):
 
     def export(self, workbook, gwells_zip, worksheet_name, cursor):
         logger.info('exporting {}'.format(worksheet_name))
-        worksheet = workbook.add_worksheet(worksheet_name)
+        worksheet = workbook.create_sheet(worksheet_name)
         csv_file = '{}.csv'.format(worksheet_name)
         if os.path.exists(csv_file):
             os.remove(csv_file)
@@ -60,8 +60,8 @@ class Command(BaseCommand):
             values = []
             # Write the headings
             for index, field in enumerate(cursor.description):
-                worksheet.write(0, index, '{}'.format(field.name))
                 values.append(field.name)
+            worksheet.append(values)
             csvwriter.writerow(values)
 
             # Write the values
@@ -70,16 +70,22 @@ class Command(BaseCommand):
                 values = []
                 num_values = 0
                 for col, value in enumerate(record):
-                    if value:
+                    if not (value == "" or value is None):
                         num_values += 1
-                    values.append(value)
+                    if type(value) is str:
+                        # There are lots of non-printable characters in the source data that can cause
+                        # issues in the export, so we have to clear them out.
+                        v = ''.join([s for s in value if s in string.printable])
+                        # We can't have something starting with an = sign,
+                        # it would be interpreted as a formula in excel.
+                        if v.startswith('='):
+                            v = '\'{}'.format(v)
+                        values.append(v)
+                    else:
+                        values.append(value)
                 if num_values > 1:
-                    # We always have a well_tag_number, but if that's all we have, then just skip this record
-                    row_index += 1
-                    for col, value in enumerate(values):
-                        if value:
-                            worksheet.write(row_index, col, value)
                     csvwriter.writerow(values)
+                    worksheet.append(values)
         gwells_zip.write(csv_file)
         if os.path.exists(csv_file):
             os.remove(csv_file)
@@ -194,28 +200,29 @@ class Command(BaseCommand):
         with zipfile.ZipFile(zip_filename, 'w') as gwells_zip:
             if os.path.exists(spreadsheet_filename):
                 os.remove(spreadsheet_filename)
-            with xlsxwriter.Workbook(spreadsheet_filename) as workbook:
-                # Well
-                with connection.cursor() as cursor:
-                    cursor.execute(well_sql)
-                    self.export(workbook, gwells_zip, 'well', cursor)
-                # Lithology
-                with connection.cursor() as cursor:
-                    cursor.execute(lithology_sql)
-                    self.export(workbook, gwells_zip, 'lithology', cursor)
-                # Casing
-                with connection.cursor() as cursor:
-                    cursor.execute(casing_sql)
-                    self.export(workbook, gwells_zip, 'casing', cursor)
-                # Screen
-                with connection.cursor() as cursor:
-                    cursor.execute(screen_sql)
-                    self.export(workbook, gwells_zip, 'screen', cursor)
-                # Production
-                with connection.cursor() as cursor:
-                    cursor.execute(production_sql)
-                    self.export(workbook, gwells_zip, 'production', cursor)
-                # Perforation
-                with connection.cursor() as cursor:
-                    cursor.execute(perforation_sql)
-                    self.export(workbook, gwells_zip, 'perforation', cursor)
+            workbook = Workbook(write_only=True)
+            # Well
+            with connection.cursor() as cursor:
+                cursor.execute(well_sql)
+                self.export(workbook, gwells_zip, 'well', cursor)
+            # Lithology
+            with connection.cursor() as cursor:
+                cursor.execute(lithology_sql)
+                self.export(workbook, gwells_zip, 'lithology', cursor)
+            # Casing
+            with connection.cursor() as cursor:
+                cursor.execute(casing_sql)
+                self.export(workbook, gwells_zip, 'casing', cursor)
+            # Screen
+            with connection.cursor() as cursor:
+                cursor.execute(screen_sql)
+                self.export(workbook, gwells_zip, 'screen', cursor)
+            # Production
+            with connection.cursor() as cursor:
+                cursor.execute(production_sql)
+                self.export(workbook, gwells_zip, 'production', cursor)
+            # Perforation
+            with connection.cursor() as cursor:
+                cursor.execute(perforation_sql)
+                self.export(workbook, gwells_zip, 'perforation', cursor)
+            workbook.save(filename=spreadsheet_filename)
