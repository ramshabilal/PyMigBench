diff --git a/components/collector/src/collector_utilities/functions.py b/components/collector/src/collector_utilities/functions.py
        index 6df08864df270b6956cc78502aa3d9c0446038d5..d3a9a16a72348cece48c9788cf10db6cc043ec7c 100644
        --- a/components/collector/src/collector_utilities/functions.py
        +++ b/components/collector/src/collector_utilities/functions.py
@@ -4,8 +4,8 @@ import contextlib
 import hashlib
 import re
 import urllib
-from datetime import datetime, timedelta
-from typing import cast, Collection, Pattern, Tuple
+from datetime import datetime
+from typing import cast, Collection, Generator, Pattern, Tuple
 from xml.etree.ElementTree import Element  # nosec, Element is not available from defusedxml, but only used as type
 
 from defusedxml import ElementTree
@@ -13,24 +13,24 @@ from defusedxml import ElementTree
 from .type import Namespaces, Response, URL
 
 
-def parse_source_response_xml(response: Response, allowed_root_tags: Collection[str] = None) -> Element:
+async def parse_source_response_xml(response: Response, allowed_root_tags: Collection[str] = None) -> Element:
     """Parse the XML from the source response."""
-    tree = cast(Element, ElementTree.fromstring(response.text))
+    tree = cast(Element, ElementTree.fromstring(await response.text()))
     if allowed_root_tags and tree.tag not in allowed_root_tags:
         raise AssertionError(f'The XML root element should be one of "{allowed_root_tags}" but is "{tree.tag}"')
     return tree
 
 
-def parse_source_response_xml_with_namespace(
+async def parse_source_response_xml_with_namespace(
         response: Response, allowed_root_tags: Collection[str] = None) -> Tuple[Element, Namespaces]:
     """Parse the XML with namespace from the source response."""
-    tree = parse_source_response_xml(response, allowed_root_tags)
+    tree = await parse_source_response_xml(response, allowed_root_tags)
     # ElementTree has no API to get the namespace so we extract it from the root tag:
     namespaces = dict(ns=tree.tag.split('}')[0][1:])
     return tree, namespaces
 
 
-Substitution = Tuple[Pattern, str]
+Substitution = Tuple[Pattern[str], str]
 MEMORY_ADDRESS_SUB: Substitution = (re.compile(r" at 0x[0-9abcdef]+>"), ">")
 TOKEN_SUB: Substitution = (re.compile(r"token=[0-9a-zA-Z]+"), "token=<redacted>")
 KEY_SUB: Substitution = (re.compile(r"key=[0-9abcdef]+"), "key=<redacted>")
@@ -92,17 +92,17 @@ def match_string_or_regular_expression(string: str, strings_and_or_regular_expre
 
 class Clock:  # pylint: disable=too-few-public-methods
     """Class to keep track of time."""
-    def __init__(self):
+    def __init__(self) -> None:
         self.start = datetime.now()
-        self.duration = timedelta()
+        self.duration = 0.0
 
-    def stop(self):
+    def stop(self) -> None:
         """Stop the clock."""
         self.duration = (datetime.now() - self.start).total_seconds()
 
 
 @contextlib.contextmanager
-def timer():
+def timer() -> Generator[Clock, None, None]:
     """Timer context manager."""
     clock = Clock()
     yield clock
