diff --git a/sipa/initialization.py b/sipa/initialization.py
        index 48b67d395b58bf0a4fa21b28a6557cf4750efcb2..ea23791cfdc36d614189418a01a57c78859fa5e8 100644
        --- a/sipa/initialization.py
        +++ b/sipa/initialization.py
@@ -5,12 +5,11 @@ import os
 import os.path
 from datetime import datetime
 
+import sentry_sdk
 from flask_babel import Babel, get_locale
-from raven import setup_logging
-from raven.contrib.flask import Sentry
-from raven.handlers.logging import SentryHandler
 from werkzeug.contrib.fixers import ProxyFix
 from flask_qrcode import QRcode
+from sentry_sdk.integrations.flask import FlaskIntegration
 
 from sipa.babel import possible_locales, save_user_locale_setting, select_locale
 from sipa.base import IntegerConverter, login_manager
@@ -180,24 +179,22 @@ def init_logging(app):
     - If given and existent, apply the additional config file
     """
 
-    # Configure Sentry client (raven)
-    if app.config['SENTRY_DSN']:
-        logger.debug("Sentry DSN: %s", app.config['SENTRY_DSN'])
-        sentry = Sentry()
-        sentry.init_app(app, dsn=app.config['SENTRY_DSN'])
+    # TODO simplify this, by a lot.
 
-        def register_sentry_handler():
-            handler = SentryHandler()
-
-            handler.client = app.extensions['sentry'].client
-            setup_logging(handler)
-
-            return handler
-    else:
+    if not (dsn := app.config['SENTRY_DSN']):
         logger.debug("No sentry DSN specified")
-
-        def register_sentry_handler():
-            return logging.NullHandler()
+    # Configure Sentry SDK
+    else:
+        logger.debug("Sentry DSN: %s", dsn)
+        sentry_sdk.init(
+            dsn=dsn,
+            integrations=[FlaskIntegration()],
+            traces_sample_rate = 1.0,
+            # release="myapp@1.0.0",
+        )
+
+    def register_sentry_handler():
+        return logging.NullHandler()
 
     # Apply default config dict
     config = replace_empty_handler_callables(DEFAULT_CONFIG,
