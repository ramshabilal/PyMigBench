diff --git a/src/AutoSplit.py b/src/AutoSplit.py
        index a43c20e4d2b01d4642956e22c666eb23b7e25471..86244b6c190f48200826788fa6af4bd8d26b230f 100644
        --- a/src/AutoSplit.py
        +++ b/src/AutoSplit.py
@@ -1,7 +1,7 @@
-#!/usr/bin/python3.7
+#!/usr/bin/python3.9
 # -*- coding: utf-8 -*-
 
-from PyQt5 import QtCore, QtGui, QtTest, QtWidgets
+from PyQt6 import QtCore, QtGui, QtTest, QtWidgets
 from win32 import win32gui
 import sys
 import os
@@ -19,11 +19,13 @@ import split_parser
 
 
 class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
-    from hotkeys import beforeSettingHotkey, afterSettingHotkey, setSplitHotkey, setResetHotkey, setSkipSplitHotkey, setUndoSplitHotkey, setPauseHotkey
-    from error_messages import (splitImageDirectoryError, splitImageDirectoryNotFoundError, imageTypeError, regionError, regionSizeError,
-    splitHotkeyError, customThresholdError, customPauseError, alphaChannelError, alignRegionImageTypeError, alignmentNotMatchedError,
-    multipleResetImagesError, noResetImageThresholdError, resetHotkeyError, pauseHotkeyError, dummySplitsError, settingsNotFoundError,
-    invalidSettingsError, oldVersionSettingsFileError, noSettingsFileOnOpenError, tooManySettingsFilesOnOpenError)
+    from hotkeys import (
+        beforeSettingHotkey, afterSettingHotkey, setSplitHotkey, setResetHotkey, setSkipSplitHotkey, setUndoSplitHotkey,
+        setPauseHotkey)
+    from error_messages import (
+        splitImageDirectoryError, splitImageDirectoryNotFoundError, imageTypeError, regionError, regionSizeError,
+        splitHotkeyError, customThresholdError, customPauseError, alphaChannelError, alignRegionImageTypeError,
+        oldVersionSettingsFileError, noSettingsFileOnOpenError, tooManySettingsFilesOnOpenError, invalidSettingsError)
     from settings_file import saveSettings, saveSettingsAs, loadSettings, haveSettingsChanged, getSaveSettingsValues
     from screen_region import selectRegion, selectWindow, alignRegion
     from menu_bar import about, viewHelp
@@ -136,7 +138,7 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
 
     def checkLiveImage(self):
         if self.liveimageCheckBox.isChecked():
-            self.timerLiveImage.start(1000 / 60)
+            self.timerLiveImage.start(int(1000 / 60))
         else:
             self.timerLiveImage.stop()
             self.liveImageFunction()
@@ -161,7 +163,7 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
 
             # Convert to set it on the label
             qImg = QtGui.QImage(capture, capture.shape[1], capture.shape[0], capture.shape[1] * 3,
-                                QtGui.QImage.Format_RGB888)
+                                QtGui.QImage.Format.Format_RGB888)
             pix = QtGui.QPixmap(qImg)
             self.liveImage.setPixmap(pix)
 
@@ -614,7 +616,7 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
                     self.undosplitButton.setEnabled(False)
                     self.skipsplitButton.setEnabled(False)
                     self.currentsplitimagefileLabel.setText(' ')
-                    self.currentSplitImage.setAlignment(QtCore.Qt.AlignCenter)
+                    self.currentSplitImage.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
 
                     # check for reset while delayed and display a counter of the remaining split delay time
                     delay_start_time = time.time()
@@ -677,7 +679,7 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
             if self.number_of_split_images != self.split_image_number:
                 # set current split image to none
                 self.currentsplitimagefileLabel.setText(' ')
-                self.currentSplitImage.setAlignment(QtCore.Qt.AlignCenter)
+                self.currentSplitImage.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                 self.imageloopLabel.setText('Image Loop #:     -')
 
                 # if its the last split image and last loop number, disable the skip split button
@@ -878,7 +880,7 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
 
         qImg = QtGui.QImage(self.split_image_display, self.split_image_display.shape[1],
                             self.split_image_display.shape[0], self.split_image_display.shape[1] * 3,
-                            QtGui.QImage.Format_RGB888)
+                            QtGui.QImage.Format.Format_RGB888)
         self.updateCurrentSplitImage.emit(qImg)
         self.currentsplitimagefileLabel.setText(split_image_file)
 
@@ -924,48 +926,39 @@ class AutoSplit(QtWidgets.QMainWindow, design.Ui_MainWindow):
     # exit safely when closing the window
     def closeEvent(self, event):
         if self.haveSettingsChanged():
-            #give a different warning if there was never a settings file that was loaded successfully, and save as instead of save.
-            if self.last_successfully_loaded_settings_file_path == None:
-                msgBox = QtWidgets.QMessageBox
-                warning = msgBox.warning(self, "AutoSplit","Do you want to save changes made to settings file Untitled?", msgBox.Yes | msgBox.No | msgBox.Cancel)
-                if warning == msgBox.Yes:
-                    self.saveSettingsAs()
-                    sys.exit()
-                    event.accept()
-                if warning == msgBox.No:
-                    event.accept()
-                    sys.exit()
-                    pass
-                if warning == msgBox.Cancel:
-                    event.ignore()
-                    return
-            else:
-                msgBox = QtWidgets.QMessageBox
-                warning = msgBox.warning(self, "AutoSplit", "Do you want to save the changes made to the settings file " + os.path.basename(self.last_successfully_loaded_settings_file_path) + " ?", msgBox.Yes | msgBox.No | msgBox.Cancel)
-                if warning == msgBox.Yes:
-                    self.saveSettings()
-                    sys.exit()
-                    event.accept()
-                if warning == msgBox.No:
-                    event.accept()
-                    sys.exit()
-                    pass
-                if warning == msgBox.Cancel:
-                    event.ignore()
-                    return
+            # give a different warning if there was never a settings file that was loaded successfully, and save as instead of save.
+            msgBox = QtWidgets.QMessageBox
+            settings_file_name = "Untitled" \
+                if self.last_successfully_loaded_settings_file_path is None \
+                else os.path.basename(self.last_successfully_loaded_settings_file_path)
+            warning_message = f"Do you want to save changes made to settings file {settings_file_name}?"
+
+            warning = msgBox.warning(
+                self,
+                "AutoSplit",
+                warning_message,
+                msgBox.StandardButton.Yes | msgBox.StandardButton.No | msgBox.StandardButton.Cancel)
+
+            if warning == msgBox.StandardButton.Yes:
+                # TODO: Don't close if user cancelled the save
+                self.saveSettingsAs()
+                exit()
+            if warning == msgBox.StandardButton.No:
+                exit()
+            if warning == msgBox.StandardButton.Cancel:
+                event.ignore()
         else:
             event.accept()
             sys.exit()
 
 
-
 def main():
     app = QtWidgets.QApplication(sys.argv)
     app.setWindowIcon(QtGui.QIcon('icon.ico'))
     w = AutoSplit()
     w.setWindowIcon(QtGui.QIcon('icon.ico'))
     w.show()
-    sys.exit(app.exec_())
+    sys.exit(app.exec())
 
 
 if __name__ == '__main__':
