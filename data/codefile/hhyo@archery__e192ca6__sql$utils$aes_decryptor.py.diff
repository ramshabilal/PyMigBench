diff --git a/sql/utils/aes_decryptor.py b/sql/utils/aes_decryptor.py
        index fe8352ccf9fc4faa17103f341d62dcaafc60a7fa..e192ca69e2d610bc59a9f10165c7fd1c8ab9b157 100644
        --- a/sql/utils/aes_decryptor.py
        +++ b/sql/utils/aes_decryptor.py
@@ -4,7 +4,7 @@ from binascii import b2a_hex, a2b_hex
 
 class Prpcrypt():
     def __init__(self):
-        self.key = 'eCcGFZQj6PNoSSma31LR39rTzTbLkU8E'
+        self.key = 'eCcGFZQj6PNoSSma31LR39rTzTbLkU8E'.encode('utf-8')
         self.mode = AES.MODE_CBC
 
     # 加密函数，如果text不足16位就用空格补足为16位，
@@ -23,7 +23,7 @@ class Prpcrypt():
         elif count > length:
             add = (length - (count % length))
             text = text + ('\0' * add)
-        self.ciphertext = cryptor.encrypt(text)
+        self.ciphertext = cryptor.encrypt(text.encode('utf-8'))
         # 因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题
         # 所以这里统一把加密后的字符串转化为16进制字符串
         return b2a_hex(self.ciphertext).decode(encoding='utf-8')
@@ -37,8 +37,7 @@ class Prpcrypt():
 
 if __name__ == '__main__':
     pc = Prpcrypt()  # 初始化密钥
-    import sys
-    e = pc.encrypt(sys.argv[1])  # 加密
+    e = pc.encrypt('123456')  # 加密
     d = pc.decrypt(e)  # 解密
     print("加密:", str(e))
     print("解密:", str(d))
