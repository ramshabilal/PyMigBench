diff --git a/pogom/utils.py b/pogom/utils.py
        index dd1b7e1d31fa13e6a5d565b9ebdc9e9592dd709c..2960ec68f85274c37068e2577f28c44eecc4ff26 100644
        --- a/pogom/utils.py
        +++ b/pogom/utils.py
@@ -3,23 +3,18 @@
 
 import sys
 import getpass
-import argparse
+import configargparse
 import re
 import uuid
 import os
 import json
 from datetime import datetime, timedelta
-import ConfigParser
 import platform
 import logging
 import shutil
 
 from . import config
 
-from exceptions import APIKeyException
-
-DEFAULT_THREADS = 1
-
 logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(module)11s] [%(levelname)7s] %(message)s')
 log = logging.getLogger(__name__)
 
@@ -33,90 +28,56 @@ def verify_config_file_exists(filename):
         log.info("Could not find " + filename + ", copying default")
         shutil.copy2(fullpath + '.example', fullpath)
 
-def parse_config(args):
-    verify_config_file_exists('../config/config.ini')
-    Config = ConfigParser.ConfigParser()
-    Config.read(os.path.join(os.path.dirname(__file__), '../config/config.ini'))
-    args.auth_service = Config.get('Authentication', 'Service')
-    args.username = Config.get('Authentication', 'Username')
-    args.password = Config.get('Authentication', 'Password')
-    args.location = Config.get('Search_Settings', 'Location')
-    args.step_limit = int(Config.get('Search_Settings', 'Steps'))
-    args.scan_delay = int(Config.get('Search_Settings', 'Scan_delay'))
-    args.no_pokemon = Config.getboolean('Search_Settings', 'Disable_Pokemon')
-    args.no_pokestops = Config.getboolean('Search_Settings', 'Disable_Pokestops')
-    args.no_gyms = Config.getboolean('Search_Settings', 'Disable_Gyms')
-    if Config.get('Misc', 'Google_Maps_API_Key') :
-        args.gmaps_key = Config.get('Misc', 'Google_Maps_API_Key')
-    args.host = Config.get('Misc', 'Host')
-    args.port = Config.get('Misc', 'Port')
-
-    return args
-
-def parse_db_config(args):
-    verify_config_file_exists('../config/config.ini')
-    Config = ConfigParser.ConfigParser()
-    Config.read(os.path.join(os.path.dirname(__file__), '../config/config.ini'))
-    args.db_type = Config.get('Database','Type')
-    args.db_name = Config.get('Database', 'Database_Name')
-    args.db_user = Config.get('Database', 'Database_User')
-    args.db_pass = Config.get('Database', 'Database_Pass')
-    args.db_host = Config.get('Database', 'Database_Host')
-
-    return args
-
 def get_args():
     # fuck PEP8
-    parser = argparse.ArgumentParser()
-    parser.add_argument('-se', '--settings',action='store_true',default=False)
+    parser = configargparse.ArgParser(default_config_files=['config/config.ini'])
     parser.add_argument('-a', '--auth-service', type=str.lower, help='Auth Service', default='ptc')
-    parser.add_argument('-u', '--username', help='Username', required=False)
-    parser.add_argument('-p', '--password', help='Password', required=False)
-    parser.add_argument('-l', '--location', type=parse_unicode, help='Location, can be an address or coordinates', required=False)
-    parser.add_argument('-st', '--step-limit', help='Steps', required=False, type=int)
-    parser.add_argument('-sd', '--scan-delay', help='Time delay before beginning new scan', required=False, type=int, default=1)
-    parser.add_argument('-dc','--display-in-console',help='Display Found Pokemon in Console',action='store_true',default=False)
+    parser.add_argument('-u', '--username', help='Username')
+    parser.add_argument('-p', '--password', help='Password')
+    parser.add_argument('-l', '--location', type=parse_unicode, help='Location, can be an address or coordinates')
+    parser.add_argument('-st', '--step-limit', help='Steps', type=int, default=12)
+    parser.add_argument('-sd', '--scan-delay', help='Time delay before beginning new scan', type=int, default=1)
+    parser.add_argument('-dc', '--display-in-console',help='Display Found Pokemon in Console',action='store_true', default=False)
     parser.add_argument('-H', '--host', help='Set web server listening host', default='127.0.0.1')
     parser.add_argument('-P', '--port', type=int, help='Set web server listening port', default=5000)
-    parser.add_argument('-L', '--locale', help='Locale for Pokemon names: default en, check'
-                        'locale folder for more options', default='en')
+    parser.add_argument('-L', '--locale', help='Locale for Pokemon names: default en, check locale folder for more options', default='en')
     parser.add_argument('-c', '--china', help='Coordinates transformer for China', action='store_true')
     parser.add_argument('-d', '--debug', help='Debug Mode', action='store_true')
     parser.add_argument('-m', '--mock', help='Mock mode. Starts the web server but not the background thread.', action='store_true', default=False)
-    parser.add_argument('-ns', '--no-server', help='No-Server Mode. Starts the searcher but not the Webserver.', action='store_true', default=False, dest='no_server')
-    parser.add_argument('-os', '--only-server', help='Server-Only Mode. Starts only the Webserver without the searcher.', action='store_true', default=False, dest='only_server')
-    parser.add_argument('-fl', '--fixed-location', help='Hides the search bar for use in shared maps.', action='store_true', default=False, dest='fixed_location')
-    parser.add_argument('-k', '--google-maps-key', help='Google Maps Javascript API Key', default=None, dest='gmaps_key')
+    parser.add_argument('-ns', '--no-server', help='No-Server Mode. Starts the searcher but not the Webserver.', action='store_true', default=False)
+    parser.add_argument('-os', '--only-server', help='Server-Only Mode. Starts only the Webserver without the searcher.', action='store_true', default=False)
+    parser.add_argument('-fl', '--fixed-location', help='Hides the search bar for use in shared maps.', action='store_true', default=False)
+    parser.add_argument('-k', '--gmaps-key', help='Google Maps Javascript API Key', required=True)
     parser.add_argument('-C', '--cors', help='Enable CORS on web server', action='store_true', default=False)
     parser.add_argument('-D', '--db', help='Database filename', default='pogom.db')
-    parser.add_argument('-t', '--threads', help='Number of search threads', required=False, type=int, default=DEFAULT_THREADS, dest='num_threads')
+    parser.add_argument('-t', '--num-threads', help='Number of search threads', type=int, default=1)
     parser.add_argument('-np', '--no-pokemon', help='Disables Pokemon from the map (including parsing them into local db)', action='store_true', default=False)
     parser.add_argument('-ng', '--no-gyms', help='Disables Gyms from the map (including parsing them into local db)', action='store_true', default=False)
     parser.add_argument('-nk', '--no-pokestops', help='Disables PokeStops from the map (including parsing them into local db)', action='store_true', default=False)
+    parser.add_argument('--db-type', help='Type of database to be used (default: sqlite)', default='sqlite')
+    parser.add_argument('--db-name', help='Name of the database to be used')
+    parser.add_argument('--db-user', help='Username for the database')
+    parser.add_argument('--db-pass', help='Password for the database')
+    parser.add_argument('--db-host', help='IP or hostname for the database')
     parser.set_defaults(DEBUG=False)
-    args = parser.parse_args()
 
-    args = parse_db_config(args)
+    args = parser.parse_args()
 
-    if (args.settings):
-        args = parse_config(args)
+    if args.only_server:
+        if args.location is None:
+            parser.print_usage()
+            print sys.argv[0] + ': error: arguments -l/--location is required'
+            sys.exit(1);
     else:
-        if args.only_server:
-            if args.location is None:
-                parser.print_usage()
-                print sys.argv[0] + ': error: arguments -l/--location is required'
-                sys.exit(1);
-        else:
-            if (args.username is None or args.location is None or args.step_limit is None):
-                parser.print_usage()
-                print sys.argv[0] + ': error: arguments -u/--username, -l/--location, -st/--step-limit are required'
-                sys.exit(1);
-
-            if config["PASSWORD"] is None and args.password is None:
-                config["PASSWORD"] = args.password = getpass.getpass()
-            elif args.password is None:
-                args.password = config["PASSWORD"]
+        if (args.username is None or args.location is None or args.step_limit is None):
+            parser.print_usage()
+            print sys.argv[0] + ': error: arguments -u/--username, -l/--location, -st/--step-limit are required'
+            sys.exit(1);
 
+        if config["PASSWORD"] is None and args.password is None:
+            config["PASSWORD"] = args.password = getpass.getpass()
+        elif args.password is None:
+            args.password = config["PASSWORD"]
 
     return args
 
@@ -178,17 +139,3 @@ def get_pokemon_name(pokemon_id):
             get_pokemon_name.names = json.loads(f.read())
 
     return get_pokemon_name.names[str(pokemon_id)]
-
-def load_credentials(filepath):
-    verify_config_file_exists('../config/credentials.json')
-    try:
-        with open(filepath+os.path.sep+'/config/credentials.json') as file:
-            creds = json.load(file)
-    except IOError:
-        creds = {}
-    if not creds.get('gmaps_key'):
-        raise APIKeyException(\
-            "No Google Maps Javascript API key entered in \config\credentials.json file!"
-            " Please take a look at the wiki for instructions on how to generate this key,"
-            " then add that key to the file!")
-    return creds
