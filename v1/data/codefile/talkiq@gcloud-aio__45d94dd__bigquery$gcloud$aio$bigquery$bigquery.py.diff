diff --git a/bigquery/gcloud/aio/bigquery/bigquery.py b/bigquery/gcloud/aio/bigquery/bigquery.py
        index 5b7b4fdb41813c83e0e0a2dbcbeb1f73c8fbbde0..45d94ddaf969648d5479ff480a92b16d537716f9 100644
        --- a/bigquery/gcloud/aio/bigquery/bigquery.py
        +++ b/bigquery/gcloud/aio/bigquery/bigquery.py
@@ -2,8 +2,8 @@ import functools
 import logging
 import uuid
 
+import aiohttp
 from gcloud.aio.auth import Token
-from gcloud.aio.core.http import post
 try:
     import ujson as json
 except ModuleNotFoundError:
@@ -71,46 +71,37 @@ class Table(object):
 
     async def insert(self, rows, skip_invalid=False, ignore_unknown=True,
                      session=None):
-
         session = session or self.session
 
-        body = make_insert_body(
-            rows,
-            skip_invalid=skip_invalid,
-            ignore_unknown=ignore_unknown
-        )
-
-        headers = await self.headers()
-
-        url = '{}/{}'.format(
-            API_ROOT,
-            INSERT_TEMPLATE.format(
-                proj=self.project,
-                dataset=self.dataset_name,
-                table=self.table_name
-            )
-        )
-
+        url = '{}/{}'.format(API_ROOT, INSERT_TEMPLATE.format(
+            proj=self.project, dataset=self.dataset_name,
+            table=self.table_name))
         log.info('Inserting %d rows to %s', len(rows), url)
 
-        status, content = await post(
-            url,
-            payload=body,
-            headers=headers
-        )
+        body = make_insert_body(rows, skip_invalid=skip_invalid,
+                                ignore_unknown=ignore_unknown)
+        payload = json.dumps(body).encode('utf-8')
+
+        headers = await self.headers()
+        headers.update({
+            'Content-Length': str(len(payload)),
+            'Content-Type': 'application/json'
+        })
 
-        success = 299 >= status >= 200 and 'insertErrors' not in content
+        async with aiohttp.ClientSession() as s:
+            response = await s.post(url, data=payload, headers=headers,
+                                    params=None, timeout=60)
+            content = await response.json()
 
-        if success:
-            return success
+        if 299 >= response.status >= 200 and 'insertErrors' not in content:
+            return True
 
-        log.debug('response code: %d', status)
+        log.debug('response code: %d', response.status)
         log.debug('url: %s', url)
-        log.debug('body:\n%s\n', body)
+        log.debug('body:\n%s\n', payload)
 
-        raise Exception('Could not insert: {}'.format(json.dumps(
-            content, sort_keys=True
-        )))
+        raise Exception('Could not insert: {}'.format(
+            json.dumps(content, sort_keys=True)))
 
 
 async def stream_insert(table, rows):
