diff --git a/weasyl/middleware.py b/weasyl/middleware.py
        index 97717e00368e9f650dd2daf3493ee76291dc5710..d10cb162447d9e3a9506b76054851863b10ff27a 100644
        --- a/weasyl/middleware.py
        +++ b/weasyl/middleware.py
@@ -1,20 +1,15 @@
 import html
-import os
 import re
-import sys
+import secrets
 import time
-import base64
-import logging
-import raven
-import raven.processors
 import traceback
 
 from pyramid.httpexceptions import HTTPUnauthorized
 from pyramid.response import Response
 from pyramid.threadlocal import get_current_request
+from sentry_sdk import capture_exception, capture_message, push_scope, set_user
 from sqlalchemy import event
 from sqlalchemy.engine import Engine
-from twisted.internet.threads import blockingCallFromThread
 from web.utils import storify
 
 from libweasyl import staff
@@ -22,7 +17,6 @@ from libweasyl.cache import ThreadCacheProxy
 from libweasyl.models.users import GuestSession
 from weasyl import define as d
 from weasyl import errorcode
-from weasyl import http
 from weasyl import orm
 from weasyl.error import WeasylError
 from weasyl.sessions import create_guest_session, is_guest_token
@@ -102,6 +96,10 @@ def session_tween_factory(handler, registry):
 
         request.weasyl_session = sess_obj
 
+        set_user(
+            {"id": sess_obj.userid} if sess_obj.userid
+            else {"ip_address": request.client_addr})
+
         # Register a response callback to set the session cookies before returning.
         # Note that this requires that exceptions are handled properly by our exception view.
         request.add_response_callback(callback)
@@ -260,14 +258,6 @@ def userid_request_property(request):
         return 0 if userid is None else userid
 
 
-def log_exc_request_method(request, **kwargs):
-    """
-    Method on requests to log exceptions.
-    """
-    # It's unclear to me why this should be a request method and not just define.log_exc().
-    return request.environ.get('raven.captureException', lambda **kw: traceback.print_exc())(**kwargs)
-
-
 def web_input_request_method(request, *required, **kwargs):
     """
     Callable that processes the pyramid request.params multidict into a web.py storage object
@@ -312,8 +302,7 @@ def weasyl_exception_view(exc, request):
     A view for general exceptions thrown by weasyl code.
     """
     if isinstance(exc, ClientGoneAway):
-        if 'raven.captureMessage' in request.environ:
-            request.environ['raven.captureMessage']('HTTP client went away', level=logging.INFO)
+        capture_message('HTTP client went away')
         return request.response
     else:
         # Avoid using the reified request.userid property here. It might not be set and it might
@@ -336,10 +325,11 @@ def weasyl_exception_view(exc, request):
                     message = '%s %s' % (message, exc.error_suffix)
                 return Response(d.errorpage(userid, message, **errorpage_kwargs),
                                 status_code=status_code)
-        request_id = None
-        if 'raven.captureException' in request.environ:
-            request_id = base64.b64encode(os.urandom(6), b'+-').decode('ascii')
-            event_id = request.environ['raven.captureException'](request_id=request_id)
+        request_id = secrets.token_urlsafe(6)
+        with push_scope() as scope:
+            scope.set_tag('request_id', request_id)
+            event_id = capture_exception(exc)
+        if event_id is not None:
             request_id = '%s-%s' % (event_id, request_id)
         print("unhandled error (request id %s) in %r" % (request_id, request.environ))
         traceback.print_exc()
@@ -349,39 +339,17 @@ def weasyl_exception_view(exc, request):
             return Response(d.errorpage(userid, request_id=request_id, **errorpage_kwargs), status_code=500)
 
 
-class RemoveSessionCookieProcessor(raven.processors.Processor):
-    """
-    Removes Weasyl session cookies.
-    """
-    def _filter_header(self, value):
-        return re.sub(
-            r'WZL=(\w+)',
-            lambda match: 'WZL=' + '*' * len(match.group(1)),
-            value)
-
-    def filter_http(self, data):
-        if 'cookies' in data:
-            data['cookies'] = self._filter_header(data['cookies'])
-
-        if 'headers' in data and 'Cookie' in data['headers']:
-            data['headers']['Cookie'] = self._filter_header(data['headers']['Cookie'])
-
-        env = data.get('env')
-
-        if env is not None:
-            if 'HTTP_COOKIE' in env:
-                env['HTTP_COOKIE'] = self._filter_header(env['HTTP_COOKIE'])
-
-            # WebOb cache, like:
-            #  - webob._parsed_query_vars
-            #  - webob._body_file
-            #  - webob._parsed_post_vars
-            #  - webob._parsed_cookies
-            # These mostly just repeat information that can be found elsewhere,
-            # so theyâ€™re removed rather than filtered.
-            remove_keys = [key for key in env if key.startswith('webob._')]
-            for key in remove_keys:
-                del env[key]
+def strip_session_cookie(event, hint):
+    if request := event.get('request'):
+        if (headers := request.get('headers')) and 'Cookie' in headers:
+            headers['Cookie'] = re.sub(
+                r'(WZL="?)([^";]+)',
+                lambda match: match.group(1) + '*' * len(match.group(2)),
+                headers['Cookie']
+            )
+        if (cookies := request.get('cookies')) and 'WZL' in cookies:
+            cookies['WZL'] = '*' * len(cookies['WZL'])
+    return event
 
 
 class URLSchemeFixingMiddleware(object):
@@ -394,64 +362,6 @@ class URLSchemeFixingMiddleware(object):
         return self.app(environ, start_response)
 
 
-class SentryEnvironmentMiddleware(object):
-    def __init__(self, app, dsn, reactor=None):
-        self.app = app
-        self.client = raven.Client(
-            dsn=dsn,
-            release=d.CURRENT_SHA,
-            processors=[
-                'raven.processors.SanitizePasswordsProcessor',
-                'weasyl.middleware.RemoveSessionCookieProcessor',
-            ],
-        )
-        if reactor is None:
-            from twisted.internet import reactor
-        self.reactor = reactor
-
-    def ravenCaptureArguments(self, level=None, **extra):
-        request = get_current_request()
-        data = {
-            'level': level,
-            'user': {
-                'id': d.get_userid(),
-                'ip_address': d.get_address(),
-            },
-            'request': {
-                'url': request.environ['PATH_INFO'],
-                'method': request.environ['REQUEST_METHOD'],
-                'data': request.POST,
-                'query_string': request.environ['QUERY_STRING'],
-                'headers': http.get_headers(request.environ),
-                'env': request.environ,
-            },
-        }
-
-        return {
-            'data': data,
-            'extra': dict(
-                extra,
-                session=getattr(request, 'weasyl_session', None),
-            ),
-        }
-
-    def captureException(self, **extra):
-        kwargs = self.ravenCaptureArguments(**extra)
-        exc_info = sys.exc_info()
-        return blockingCallFromThread(
-            self.reactor, self.client.captureException, exc_info, **kwargs)
-
-    def captureMessage(self, message, **extra):
-        kwargs = self.ravenCaptureArguments(**extra)
-        return blockingCallFromThread(
-            self.reactor, self.client.captureMessage, message, **kwargs)
-
-    def __call__(self, environ, start_response):
-        environ['raven.captureException'] = self.captureException
-        environ['raven.captureMessage'] = self.captureMessage
-        return self.app(environ, start_response)
-
-
 def _wrapperfunc(name):
     def wrap(self, *a, **kw):
         meth = getattr(self._wrapped, name)
